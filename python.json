[
    {
        "category": "Basic Syntax",
        "tag": "syntax"
    },
    "# - Single line comment",
    "''' ''' or \"\"\" \"\"\" - Multi-line comment",
    "variable = value - Variable assignment",
    "print() - Output to console",
    "input() - Get user input",
    "if condition:, elif condition:, else: - Conditional statements",
    "for item in iterable: - For loop",
    "while condition: - While loop",
    "def function_name(parameters): - Function definition",
    "class ClassName: - Class definition",
    "import module - Import a module",
    "from module import function - Import specific function",
    "try:, except:, finally: - Exception handling",
    "with context_manager as variable: - Context management",
    "lambda arguments: expression - Lambda function",
    "yield value - Generator function",
    {
        "category": "Data Types",
        "tag": "datatypes"
    },
    "int() - Integer",
    "float() - Floating-point number",
    "str() - String",
    "bool() - Boolean",
    "list() - List",
    "tuple() - Tuple",
    "set() - Set",
    "dict() - Dictionary",
    "complex() - Complex number",
    "bytes() - Bytes object",
    "bytearray() - Mutable bytes object",
    "frozenset() - Immutable set",
    "range() - Range object",
    "None - Null object",
    {
        "category": "String Operations",
        "tag": "strings"
    },
    "str.upper() - Convert to uppercase",
    "str.lower() - Convert to lowercase",
    "str.strip() - Remove whitespace",
    "str.split() - Split string into list",
    "str.join() - Join iterable into string",
    "str.format() - Format string",
    "f\"{}\" - F-string formatting",
    "str.replace() - Replace substring",
    "str.startswith() - Check string start",
    "str.endswith() - Check string end",
    "str.find() - Find substring",
    "str.count() - Count occurrences",
    {
        "category": "List Operations",
        "tag": "lists"
    },
    "list.append() - Add item to end",
    "list.extend() - Add iterable to end",
    "list.insert() - Insert item at index",
    "list.remove() - Remove first occurrence",
    "list.pop() - Remove and return item",
    "list.clear() - Remove all items",
    "list.index() - Get index of item",
    "list.count() - Count occurrences",
    "list.sort() - Sort list in place",
    "list.reverse() - Reverse list in place",
    "list.copy() - Shallow copy of list",
    "[x for x in iterable] - List comprehension",
    {
        "category": "Dictionary Operations",
        "tag": "dicts"
    },
    "dict[key] - Access value by key",
    "dict.get() - Get value with default",
    "dict.keys() - Get list of keys",
    "dict.values() - Get list of values",
    "dict.items() - Get list of key-value pairs",
    "dict.update() - Update dictionary",
    "dict.pop() - Remove and return value",
    "dict.popitem() - Remove and return last item",
    "dict.clear() - Remove all items",
    "dict.copy() - Shallow copy of dictionary",
    "{key: value for item in iterable} - Dict comprehension",
    {
        "category": "Set Operations",
        "tag": "sets"
    },
    "set.add() - Add element to set",
    "set.remove() - Remove element",
    "set.discard() - Remove element if present",
    "set.pop() - Remove and return arbitrary element",
    "set.clear() - Remove all elements",
    "set.union() - Return union of sets",
    "set.intersection() - Return intersection",
    "set.difference() - Return difference",
    "set.symmetric_difference() - Return symmetric difference",
    "set.issubset() - Test if subset",
    "set.issuperset() - Test if superset",
    "{x for x in iterable} - Set comprehension",
    {
        "category": "File Operations",
        "tag": "files"
    },
    "open() - Open file",
    "file.read() - Read entire file",
    "file.readline() - Read single line",
    "file.readlines() - Read all lines",
    "file.write() - Write to file",
    "file.close() - Close file",
    "with open() as file: - Context manager for file operations",
    "os.path.exists() - Check if file exists",
    "os.remove() - Delete file",
    "os.rename() - Rename file",
    "os.mkdir() - Create directory",
    "os.rmdir() - Remove directory",
    "os.listdir() - List directory contents",
    {
        "category": "Modules and Packages",
        "tag": "modules"
    },
    "import module - Import module",
    "from module import function - Import specific function",
    "import module as alias - Import with alias",
    "from module import * - Import all functions (not recommended)",
    "__init__.py - Package initializer",
    "__main__.py - Main script of a module",
    "if __name__ == \"__main__\": - Main script guard",
    "sys.path - Module search path",
    "pip install package - Install package",
    "pip uninstall package - Uninstall package",
    "pip list - List installed packages",
    "pip freeze - Output installed packages in requirements format",
    {
        "category": "Object-Oriented Programming",
        "tag": "oop"
    },
    "class ClassName: - Define a class",
    "__init__() - Constructor method",
    "self - Instance reference",
    "super() - Call superclass method",
    "@classmethod - Class method decorator",
    "@staticmethod - Static method decorator",
    "@property - Property decorator",
    "__str__() - String representation",
    "__repr__() - Detailed string representation",
    "__len__() - Length of object",
    "__getitem__() - Access items with []",
    "__setitem__() - Set items with []",
    "__iter__() - Make object iterable",
    "__next__() - Define iteration behavior",
    "__enter__(), __exit__() - Context manager methods",
    {
        "category": "Functional Programming",
        "tag": "functional"
    },
    "map(function, iterable) - Apply function to all items",
    "filter(function, iterable) - Filter items by function",
    "reduce(function, iterable) - Reduce iterable to single value",
    "lambda arguments: expression - Anonymous function",
    "functools.partial() - Partial function application",
    "itertools module - Iterator functions",
    "functools.lru_cache() - Memoization decorator",
    "operator module - Standard operators as functions",
    {
        "category": "Decorators",
        "tag": "decorators"
    },
    "@decorator - Apply decorator to function",
    "@decorator(args) - Apply parameterized decorator",
    "functools.wraps() - Preserve function metadata in decorators",
    "@property - Create a property",
    "@classmethod - Create a class method",
    "@staticmethod - Create a static method",
    "@abstractmethod - Define an abstract method",
    {
        "category": "Error Handling",
        "tag": "errors"
    },
    "try: - Start a try block",
    "except ExceptionType: - Catch specific exception",
    "except ExceptionType as e: - Catch and bind exception",
    "except: - Catch all exceptions (use carefully)",
    "else: - Execute if no exception occurred",
    "finally: - Always execute",
    "raise ExceptionType - Raise an exception",
    "assert condition - Assertion",
    "with - Context manager for exception handling",
    {
        "category": "Concurrency",
        "tag": "concurrency"
    },
    "threading.Thread() - Create a thread",
    "thread.start() - Start a thread",
    "thread.join() - Wait for thread to finish",
    "threading.Lock() - Create a lock",
    "multiprocessing.Process() - Create a process",
    "asyncio.run() - Run async function",
    "async def - Define async function",
    "await - Wait for async operation",
    "asyncio.create_task() - Create a task",
    "asyncio.gather() - Wait for multiple tasks",
    {
        "category": "Standard Library",
        "tag": "stdlib"
    },
    "os - Operating system interface",
    "sys - System-specific parameters and functions",
    "datetime - Date and time functions",
    "math - Mathematical functions",
    "random - Generate random numbers",
    "re - Regular expressions",
    "json - JSON encoder and decoder",
    "csv - CSV file reading and writing",
    "collections - Specialized container datatypes",
    "itertools - Functions creating iterators",
    "functools - Higher-order functions and operations",
    "logging - Logging facility",
    "argparse - Parse command-line options",
    "unittest - Unit testing framework",
    "pathlib - Object-oriented filesystem paths",
    {
        "category": "Virtual Environments",
        "tag": "venv"
    },
    "python -m venv myenv - Create virtual environment",
    "source myenv/bin/activate - Activate (Unix)",
    "myenv\\Scripts\\activate.bat - Activate (Windows)",
    "deactivate - Deactivate virtual environment",
    "pip install -r requirements.txt - Install from requirements file",
    {
        "category": "Code Style and Linting",
        "tag": "style"
    },
    "PEP 8 - Python style guide",
    "pylint - Code analysis",
    "flake8 - Style guide enforcement",
    "black - Code formatter",
    "mypy - Static type checker",
    {
        "category": "Testing",
        "tag": "testing"
    },
    "unittest - Built-in testing framework",
    "pytest - Third-party testing framework",
    "doctest - Test interactive examples in docstrings",
    "mock - Mocking and patching library",
    "coverage - Measure code coverage",
    {
        "category": "Performance",
        "tag": "performance"
    },
    "timeit - Measure execution time of small code snippets",
    "cProfile - Deterministic profiling of Python programs",
    "memory_profiler - Monitor memory usage of Python code",
    "psutil - Cross-platform lib for process and system monitoring",
    {
        "category": "Data Science and Machine Learning",
        "tag": "datascience"
    },
    "numpy - Numerical computing",
    "pandas - Data manipulation and analysis",
    "matplotlib - Plotting library",
    "scipy - Scientific computing",
    "scikit-learn - Machine learning",
    "tensorflow - Deep learning",
    "pytorch - Deep learning",
    "jupyter - Interactive computing",
    {
        "category": "Web Development",
        "tag": "web"
    },
    "flask - Lightweight web framework",
    "django - Full-featured web framework",
    "requests - HTTP library",
    "beautifulsoup - Web scraping library",
    "fastapi - Modern, fast web framework",
    {
        "category": "Database",
        "tag": "database"
    },
    "sqlite3 - SQLite database interface",
    "psycopg2 - PostgreSQL database adapter",
    "sqlalchemy - SQL toolkit and ORM",
    "mongodb - MongoDB interface",
    "redis - Redis interface"
]
